{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","EddFoxImage","Container","marginTop","maxWidth","position","src","alt","paddingBottom","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","signatures","sig","equals","sendTransaction","broadcastTransaction","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","Title","Link","Navbar","href","createTheme","palette","type","process","e","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","SequenceType","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","length","push","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","StopOnFailure","Promise","all","txs","result","awaitConfirmation","includesFeePayer","Array","isArray","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","timeout","startTime","sleep","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","confirmations","subId","resolve","reject","onSignature","context","getSignatureStatuses","signatureStatuses","removeSignatureListener","ms","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","currentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn"],"mappings":"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","file":"static/js/main.e37c4980.chunk.js","sourcesContent":["import { Paper } from \"@material-ui/core\";\nimport Countdown from \"react-countdown\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      padding: theme.spacing(0),\n      \"& > *\": {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#384457\",\n        color: \"rgb(214, 181, 12)\",\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: \"flex\",\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      background: \"#874201\",\n      color: \"rgb(214, 181, 12)\",\n      borderRadius: 5,\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n  })\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #000000 0%, #000000 100%);\n  color: rgb(214, 181, 12) !important;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"REDEEM CARROT JUICE\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\") {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { sendTransaction } from \"./connection\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #000000 0%, #000000 100%);\n  color: rgb(214, 181, 12);\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!anchorWallet) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  const EddFoxImage = styled(\"img\")`\n  width: 100%; \n  height: 350px;\n  object-fit: cover;\n  margin-bottom: -3px;\n  border-radius: 10%;\n  `\n  \n  return (\n    <Container style={{ marginTop: 0}}>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n        <EddFoxImage src=\"/ghostbunny.gif\" alt=\"eddfox\" style={{marginTop: \"20px\", marginBottom: \"20px\"}}/>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            background: 'linear-gradient(180deg, #000000 0%, #FFFFFF 100%)',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton style={{color: \"rgb(214, 181, 12)\"}}>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textPrimary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\", color: \"rgb(214, 181, 12)\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                              ? \"PRESALE\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\", color: \"white\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find((sig) =>\n                        sig.publicKey.equals(wallet.publicKey!)\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: \"Please sign one-time Civic Pass issuance\",\n                          severity: \"info\",\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: \"User cancelled signing\",\n                            severity: \"error\",\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: \"Refreshing Civic Pass\",\n                          severity: \"info\",\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          \"confirmed\"\n                        );\n                        setAlertState({\n                          open: true,\n                          message: \"Please sign minting\",\n                          severity: \"info\",\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            \"Solana dropped the transaction, please try again\",\n                          severity: \"warning\",\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: \"black\" }}\n          >\n            Powered by BOBBY RABBITS\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import styled from \"styled-components\";\nimport \"./Navbar.css\";\n\nconst Title = styled(\"h1\")`\n    font-size: 3rem;\n    margin: 0;\n    white-space: nowrap;\n    font-family: 'Rockwell', cursive;\n    color: rgb(214, 181, 12)\n`\n\nconst Link = styled(\"a\")`\n    font-size: 1.5rem;\n    margin:1rem;\n    cursor: pointer;\n    color: #000000;\n    text-decoration: none;\n\n    position: absolute;\n    right: 5%;\n\n    @media (max-width: 700px) {\n        position: initial;\n    } \n\n`\n\nconst Navbar = () => {\n    return (\n        <div className=\"Container\">\n            <Title style={{marginTop: \"20px\", marginBottom: \"10px\", color: \"white\"}}>\n                <div className=\"Title\">\n                    Ghost Bunny\n                </div>\n            </Title>\n            <Title style={{fontSize: \"1em\", marginTop: \"20px\"}}>\n                <div className=\"Subtitle\">\n            by 24 Carrot\n                </div>\n            </Title>\n            <Link href=\"https://www.bobbyrabbits.com/#/BunnyClub\">\n                <div className=\"Link\">\n                About\n                </div>\n            </Link>\n        </div>\n\n    )\n}\n\nexport default Navbar;","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport Navbar from \"./components/Navbar\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Navbar />\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n              error={error}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map((s) => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map((s) => s.publicKey)\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}